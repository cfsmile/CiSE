#+Title: Active Documents with Org-mode
#+Author:
#+Options: ^:nil toc:nil

\begin{abstract}

  Org-mode is a simple markup language for hierarchical plain text
  file containing data, code and prose.  An entire research project
  can live in a single Org-mode file.  Org-mode provides support for
  initial note taking, planning and task managment, for embedded code
  and data which can be executed from within the document, and for
  export to a number of backends for sharing intermediate results and
  for publishing journal-quality articles.

  This article will include overview of key features, example, and
  discussion.

\end{abstract}

* Overview
Org-mode is a plain text document format which allows data, code and
prose to be co-mingled in a single document.  In addition Org-mode
provides sophisticated task managment features.  This article focuses
on the application of Org-mode to research projects including storing
and evaluating data and code embedded in Org-mode documents, the
export of Org-mode documents for publication, and the automatic
re-evaluation and re-generation of analysis and figures during export.

* Syntax
** Basics of Org-mode Syntax
- Meta-information at the top
- headlines and folding
- links

** Code and Data
- tables
- blocks of data
- blocks of code
  - (some) header arguments

* Evaluation
Active code and data blocks in Org-mode documents can be named, al-
lowing them to reference one another. This ability makes it possible
for easily combine snippets of code from various languages into a
single func- tional package. Figure 1 shows a series of chained
evaluation which can be triggered either interactively by the user, or
upon export of the document.

When the =analyze= code block is evaluated, the following events take
place automatically.
1. The =analyze= code block is evaluated.  The =:var data=data= header
   argument causes the =data= Org-mode to evaluate the =data= reference.

2. To resolve this reference the =data= code block is located in the
   Org-mode file and is evaluated.

3. The =:var raw=raw= header argument causes Org-mode to resolve the
   =raw= reference.

4. The =raw= code block is evaluated, the =:var url=http://data.org=
   header argument is evaluated as a literate value which is assigned
   to the =url= variable and passed to the shell script.
   
   The shell script then downloads data from the external url, and
   returns this data as the result to Org-mode.

5. The results of the shell script are assigned to the =raw= variable
   which is passed to the Python code in the body of the =data= code
   block.

6. This code is passed to an external Python interpreter which
   evaluates the Python code and returns its result to Org-mode.

7. The results of the =data= code block are then assigned to the
   =data= variable and passed to the R code in the body of the
   =analyze= code block.

8. This code is then passed to an external R interpreter which
   evaluates the R code and generates the =fig.pdf= figure.

9. A reference to this figure is then passed from the =analyze= code
   block back to Org-mode which inserts a link to this figure into the
   body of the Org-mode document.  On export this link will embed the
   linked figure into the exported document.

#+label: fig:overview
#+Caption: Active Org-mode Document
#+attr_latex: width=\textwidth
[[file:overview.pdf]]

* Example Application
This example will show correlation of home team offensive statistics
with attendance for the src_sh[:var season=season]{echo $season}
season.

#+results: season
: 2010

This first simple code block translates the season into the url used
to grab the season statistics from http://www.retrosheet.org [fn:1].

#+source: url
#+begin_src sh :var season=season
  echo "http://www.retrosheet.org/gamelogs/gl$season.zip"
#+end_src

Next we grab the statistics, saving them to a local text file.  The
=:cache yes= header argument ensures that the code block is only run
once and the data is not downloaded multiple times.

#+source: raw-data
#+begin_src sh :cache yes :var url=url :file 2010.csv
  wget $url && \
      unzip -p gl2010.zip > 2010.csv && \
      rm gl2010.zip
#+end_src

#+results[5b2ff918c69c8588ceb2ff6b9f297e68c8a24e08]: raw-data
[[file:2010.csv]]

The next two code block should probably be combined into a single
python code block...  They return the names of the offensive
statistics which we will be testing for correlation.

#+source: stat-headers
#+begin_src sh :results output :cache yes
  curl http://www.retrosheet.org/gamelogs/glfields.txt \
      |head -74 \
      |tail -17 \
      |cut -c14- \
      |grep -v "^ " \
      |cut -d "." -f1 |cut -d "(" -f1
#+end_src

#+results[7d12e3d1647a593064f8551ea8b5e06ec094ced4]: stat-headers
#+begin_example
hits
doubles
triples
homeruns
RBI
sacrifice hits
sacrifice flies 
hit-by-pitch
walks
intentional walks
strikeouts
stolen bases
caught stealing
grounded into double plays
awarded first on catcher's interference
left on base
#+end_example

#+source: stat-headers-list
#+begin_src emacs-lisp :var headers=stat-headers :results list
  (split-string headers "\n")
#+end_src

#+results: stat-headers-list
- hits
- doubles
- triples
- homeruns
- RBI
- sacrifice hits
- sacrifice flies 
- hit-by-pitch
- walks
- intentional walks
- strikeouts
- stolen bases
- caught stealing
- grounded into double plays
- awarded first on catcher's interference
- left on base

This code block collects the offensive statistics from the raw data
file.

#+source: offensive-stats
#+begin_src sh :var file=raw-data
  cat $file \
      |awk '{for (x=50; x<=66; x++) {  printf "%s ", $x } print $18 }' FS=","
#+end_src

This code block uses the =R= statistical programming language to
calculate correlations.

#+source: analysis
#+begin_src R :var headers=stat-headers-list :var data=offensive-stats
  # apply the headers to the list
  
  # perform a simple correlation of each column with the attendence
  
  # return the name of the most correlated column

#+end_src

Then in some text in this portion of the example we can display the
name of the most correlated column using an inline code block.  The
home team offensive statistic most correlated with game attendance is
the src_sh[:var stat=analysis]{echo $stat}.

Using gnuplot we can plot histograms of the most correlated statistic
against the attendance, maybe doing something cute like using images
of baseball bats for the histogram bars...

#+begin_src gnuplot
  
#+end_src

Finally we mention that it is trivial for the reader of the paper not
only to re-run all of these calculations exactly as performed in the
original export of the data, but also to change the value of the
season at the beginning of the example, and to then re-run the
analysis on a new season.

* Conclusion
The following features make Org-mode an excellent tool enabling
reproducible research. (will need to condense this drastically).

- Natural :: Org-mode documents can be used simply as plain text
     notes, as a hierarchical outlining system, or as an entire
     laboratory.  These various levels of sophistication enable quick
     adoption followed by gradual learning and mastery.
- Navigation of Large Projects :: The hierarchical folding of Org-mode
     documents enables users to comfortably read and edit even very
     large files by hiding much of the file from plain site.
- Familiar editing environment :: Org-mode leverages the sophisticated
     editing modes available in Emacs for both natural and
     computational languages.
- Reproducibility :: Org-mode makes reproduction the analysis embedded
     in a document trivial for both the original author and for
     readers.
- Portable :: Org-mode files are plain text ensuring that they can
     easily be used on any machine.
- Provenance :: Given that Org-mode files are plain text, they
     integrate easily into version control systems, allowing for
     revision tracking and collaboration.
- Consistency :: A single Org-mode document can be used for every
     stage of a research project from brain-storming, through initial
     development, and to publication.  This greatly reduces the burden
     on the author of tracking resources, and increases the chance
     that all information required for reproduction of the work will
     be maintained.
- Open Source :: Org-mode is open source software.  Its inner workings
     are publicly visible, and its copyright is owned by the Free
     Software Foundation FSF.  This ensures that Org-mode and any work
     deriving from Org-mode will always be fully open to public
     scrutiny and modification.  These are essential qualities for
     software tools used for reproducible research.  The transparency
     required for computational results to be accepted by the
     scientific community can only be achieved when the workings of
     each tool in the scientist's tool chain is open to inspection and
     verification.
- Active community :: The Org-mode community provides ready support to
     both novice users with basic questions and to developers seeking
     to extend Org-mode.  The development of Org-mode would not have
     been possible without the attention and effort of this community.
- General and extensible :: A main design goal of Org-mode's support
     for working with source code was generality.  As a result, it
     displays no reproducible research or literate programming bias,
     supports arbitrary programming languages, and exports to a wide
     variety of file types, including ASCII, \LaTeX{}, HTML, and
     DocBook.  Researchers and software developers who adopt Org-mode
     can be confident that it will be able to adapt to new languages
     or modes of development.

* COMMENT How to Export this Document
* Footnotes
[fn:1] The information used here was obtained free of charge from and
is copyrighted by Retrosheet.  Interested parties may contact
Retrosheet at "www.retrosheet.org".
